class Solution {
    class Node{
        String key;
        double value;
        
        Node(String k, double val)
        {
            key = k;
            value = val;
        }
    }
    
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        
        Map<String, List<Node>> g = buildGraph(equations, values);
        
        double [] res = new double[queries.size()];
        
        for(int i = 0; i < queries.size(); i++)
        {
            res[i] = dfs(queries.get(i).get(0), queries.get(i).get(1), new HashSet(), g);
        }
        
        return res;
    }
    
    //dfs travel
    private double dfs(String src, String dest, Set<String> visited, Map<String, List<Node>> g)
    {
        if(!(g.containsKey(src) && g.containsKey(dest)))
            return -1.0;
        
        if(src.equals(dest))
            return 1.0;
        
        visited.add(src);
        
        for(Node neighbour : g.get(src))
        {
            if(!visited.contains(neighbour.key))
            {
                double ans = dfs(neighbour.key, dest, visited, g);
                if(ans != -1.0)
                {
                    return ans * neighbour.value;
                }
            }
        }
        
        return -1.0;
    }
    
    
    //build graph
    private Map<String, List<Node>> buildGraph(List<List<String>> equations, double[] values)
    {
        Map<String, List<Node>> g = new HashMap();
        
        for(int i = 0; i < values.length; i++)
        {
            String src = equations.get(i).get(0);
            String dest = equations.get(i).get(1);
            g.putIfAbsent(src, new ArrayList());
            g.putIfAbsent(dest, new ArrayList());
            g.get(src).add(new Node(dest, values[i]));
            g.get(dest).add(new Node(src, 1/values[i]));
        }
        
        return g;
    }
}

//https://www.youtube.com/watch?v=UcDZM6Ap5P4
